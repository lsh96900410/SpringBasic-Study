빈 스코프란 말 그대로 빈이 존재할 수 있는 범위를 말한다.
1. 싱글톤 : 기본 스코프 , 스프링 컨테이너의 시작과 끝을 함께하는 가장 넓은 범위의 스코프
2. 프로토타입 : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계주입 생성자 호출 까지만 관여하고 클라이언트로 위임한다. 
3. 웹 관련 스코프
	- request : 웹 요청이 들어오는 시점부터 응답하는 시점까지 유지
	- session : 웹 세션이 생성되고 종료될 때까지 유지
	- applicatoin : 웹의 서블릿 컨텍스트와 같은 범위로 유지 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
프로토타입 스코프
: 싱글톤 스코프의 빈을 조회하면 항상 같은 인스턴스의 스프링 빈을 반환한다. 하지만, 프로토타입 스코프를 조회하면 조회마다 새로운 인스턴스를 생성해서 반환한다.
  그렇기에 @PostConstruct 같은 시작 메쏘드는 작동하지만,  @PreDestroy 같은 종료 메쏘드가 작동하지않는다. -> 클라이언트가 직접 해야함

만약 프로토타입 스코프 와 싱글톤 빈을 같이 사용하게되면 ?

1. 싱글톤 빈이 의존관계 주입을 통해 프로토타입 빈을 주입 받게되는 경우 
	싱글톤 빈은 스프링 보통 컨테이너 생성 시점에 함께 생성되면서 DI도 발생한다. 이때, 프로토타입 빈을 컨테이너에 요청하게되고, 싱글톤 빈은 프로토타입 빈(참조 값)을 내부 필드에 보관한다.
	여기서 문제가 되는것은 프로토타입 빈은 항상 새로운 인스턴스가 생성되어야하지만, 싱글톤 빈 내부에 존재하기에 싱글톤 빈과 함께 계속 유지되는 것이다.
	프로토타입 빈의 사용목적? 원하는 바는 사용할때마다 새로 생성해서 사용하는 것이다.

--> 이 문제는 Provider로 해결가능하다.
	- 스프링 컨테이너에 요청하는 방법. 
	: 프로토타입 빈을 계속 컨테이너에 달라고 요청하는 것이다. 
	하지만, 이방법은 스프링 컨테이너에 종속적인 코드가 되고, 단위 테스트도 어려워진다.

--> ObjectFactory > ObjectProvider 
	- 지정한 빈을 컨테이너에서 대신 찾아주는 DL(Dependency Lookup) 서비스를 제공해준다.

--> JSR -330 Provider 
	- 자바 표준을 사용하는 방법이다.
	- javax.inject:javax.inject:1 라이브러리를 gradle에 추가해야 한다.
	: .get() 메소드 하나로 기능이 매우 단순함. 	
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
웹 스코프란 웹 환경에서만 동작하는 스코프이며, 스프링이 종료시점까지 관리한다.

1. request :Http 요청 하나가 들어오고 나가는 사이클동안 유지되며, HTTP 요청마다 별도의 빈 인스턴스가 생성,관리된다
	- UUID 기능 활용해보기 : HTTP 요청 구분
	- 비지니스 로직을 실행하는 서비스 계층은 웹 기술에 종속되지않고, 순수하게 유지하는것이 좋다

2. session : HTTP Session 과 동일한 생명주기를 가지는 스코프

3. application : 서블릿 컨텍스트 (ServletContext) 와 동일한 생명주기를 가지는 스코프

4. websocket : 웹 소켓과 동일한 생명주기를 가지는 스코프

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
스코프와 프록시
proxyMode = ScopedProxyMode.TARGET_CLASS 를 추가하기
적용 대상이 인터페이스가 아닌 클래스면 TARGET_CLASS 를 선택
적용 대상이 인터페이스면 INTERFACES 를 선택

동작 원리 
: CGLIB 이라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 컨테이너 생성 시점에 주입한다.

가짜프록시 객체에는 진짜 빈 객체를 찾는 로직이 존재한다.
가짜 프록시 객체는 원본 클래스를 상속 받아서 만들어졌기 때문에 이 객체를 사용하는 클라이언트 입장에서는 사실 원본인지 아닌지도 모르게, 동일하게 사용할 수 있다(다형성)

동작 정리

CGLIB라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 주입한다.
이 가짜 프록시 객체는 실제 요청이 오면 그때 내부에서 실제 빈을 요청하는 위임 로직이 들어있다.
가짜 프록시 객체는 실제 request scope와는 관계가 없다. 그냥 가짜이고, 내부에 단순한 위임 로직만 있고, 싱글톤 처럼 동작한다.

특징 정리

프록시 객체 덕분에 클라이언트는 마치 싱글톤 빈을 사용하듯이 편리하게 request scope를 사용할 수 있다.
사실 Provider를 사용하든, 프록시를 사용하든 핵심 아이디어는 진짜 객체 조회를 꼭 필요한 시점까지 지연처리한다는 점이다.
단지 애노테이션 설정 변경만으로 원본 객체를 프록시 객체로 대체할 수 있다. 이것이 바로 다형성과 DI 컨테이너가 가진 큰 강점이다.
꼭 웹 스코프가 아니어도 프록시는 사용할 수 있다.

주의점
마치 싱글톤을 사용하는 것 같지만 다르게 동작하기 때문에 결국 주의해서 사용해야 한다.
이런 특별한 scope는 꼭 필요한 곳에만 최소화해서 사용하자, 무분별하게 사용하면 유지보수하기 어려워진다.

