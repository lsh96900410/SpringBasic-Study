WEB SERVER  ( NGINX , APACHE)
: Http 기반으로 동작 
: 정적 리소스를 제공 , 기타 부가기능

웹 애플리케이션 서버 ( WAS - WEB Application Server ) ( Tomcat Jetty , Undertow)
: HTTP 기반으로 동작
: 웹 서버 기능 + (정적 리소스 제공)
: 프로그램 코드를 실행해서 애플리케이션 로직 수행 ( 동적 HTML , HTTP API(JSON) , 서블릿 , JSP , 스프링 MVC )


웹 시스템 구성 
- 1. WAS , DB 
	: WAS는 정적 리소스 제공 , 애플리케이션 로직 제공 --> WAS가 너무 많은 역할을 담당하여 서버 과부하 우려 ,WAS 장애시 오류 화면도 노출 불가능

- 2. WEB , WAS , DB 
	WEB : 정적 리소스 처리 , 동적인 처리는 WAS에 위임 
	WAS : 중요한 애플리케이션 로직 처리 전담 
--> 효율적인 리소스 관리가 가능하다. 
    웹 서버는 잘 죽지않기에 , 잘 죽는 WAS ,DB 장애시 WEB 서버가 오류 화면 제공 가능 


---------------------------------------------------------------------------------------------------
서블릿

urlPatterns의 URL이 호출되면 서블릿 코드가 실행
HTTP 요청 정보,응답 정보를 편리하게 사용및 제공할 수 있는 HttpServletRequest ,HttpServletResponse 객체를 제공하기에 개발자는 HTTP 스펙을 매우 편리하게 사용 

HTTP 요청 시 1. WAS는 Request,Response 객체를 새로 만들어서 서블릿 객체를 호출 -> 개발자는 편리하게 객체들을 사용 -> Response 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성
 

--------------------------------------------------------------------------------------------------- 
서블릿이란 동적 웹 페이즈를 만들 때 사용되는 자바 기반의 웹 애플리케이션 프로그래밍 기술이다. 
서블릿은 웹 요청과 응답의 흐름을 간단한 메서드 호출만으로 체계적으로 다룰 수 있게 해준다.

---------------------------------------------------------------------------------------------------
서블릿의 주요 특징 

1. 클라이언트의 Request에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트
2. 기존의 정적 웹 프로그램의 문제점을 보완하여 동적인 여러 기능 제공
3. JAVA Thread를 이용하여 동작
4. MVC 패턴에서 컨트롤러로 이용됨

---------------------------------------------------------------------------------------------------
서블릿의 동작 과정

클라이언트가 웹 서버에 동적인 처리를 요청하면 톰캣과 같은 WAS에 위임한다.
그러면 WAS는 각 요청에 해당하는 서블릿을 실행후 결과를 클라이언트에 전송한다.

---------------------------------------------------------------------------------------------------
서블릿의 생명주기

서블릿 컨테이너가 싱글톤의서블릿 객체를 생성,초기화,호출,종료 하는 생명주기를 관리한다.

------------------------------------------------------------------------------------------------


서블릿 컨테이너

톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고한다.
서블릿 컨테이너는 서블릿 객체의 생성부터 소멸까지의 생명주기를 관리해줌.
서블릿 객체는 싱글톤으로 관리 --> 최초 로딩 시점에 서블릿 객체를 생성후 재활용 --> 모든 요청은 동일한 서블릿 객체 인스턴스에 접근 --> 공유 변수 사용 주의 
멀티 쓰레드 처리 지원 
