서블릿 덕분에 동적으로 원하는 HTML을 마음껏 만들 수 있다
그런데, 이것은 매우 복잡하고 비효율 적이다. 자바 코드로 HTML을 만드는 것보다 HTML 문서에 동적으로 변경해야하는 부분만 자바 코드를 넣는다.
이것이, 템플릿 엔진이다. -> JSP , Thymeleaf ,Freemarker , Velocity 등이 있다.

JSP를 사용하려면 라이브러리를 추가해야한다.

implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
implementation 'jakarta.servlet:jakarta.servlet-api' 
implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api' 
implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl' 


JSP 는 서버 내부에서 서블릿으로 변환됨.
<% ~~ %> : 자바 코드 입력 부분
<%= ~~ %> : 자바 코드 출력 부분
${} : 객체에 접근하여 편리하게 데이터를 조회할 수 있다.
taglib : JSP에서 여러 편리한 기능들을 제공한다. 


서블릿과 JSP의 한계

서블릿으로 개발할 때는 뷰 화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여 지저분했다.
JSP를 사용해 뷰를 생성하는 HTML 작업을 깔끔하게 가져갔고, 동적으로 필요한 부분만 자바 코드를 적용했지만, 
비지니스로직, 데이터 조회 , 뷰 렌더링 등 여러 작업이 모두 JSP 페이지에서 이루어지고있다. -> 유지보수성 ㅈㄴ하락

--------------------------------------------------------------------------------------------------------------
-> MVC 패턴의 등장 이유

: 변경의 라이프 사이클 
뷰와 비지니스 로직 사이의 변경 라이프 사이클이 다르다. 
	UI 일부 수정 과 비지니스 로직 수정은 각가 다르게 발생할 가능성이 높고 서로 영향도 주지 않는다. 

비지니스 로직은 서블릿 처럼 다른 곳에서 처리하고 , JSP는 목적에 맞게 HTML로 화면을 그리는 일로 분리.

Model View Controller --> 웹 애플리케이션은 보통 이 패턴 사용 

컨트롤러 : HTTP 요청을 받아 파라미터 검증 및 서비스 레이어로 비즈니스 로직 실행. 그리고 뷰에 전달한 데이터를 모델에 담는다.

모델 : 뷰 렌더링에 필요한 데이터들을 담아두는 곳.

뷰 : 모델에 담겨있는 데이터를 사용해 사용자에게 보여질 화면.

------------------------------------------------------------------
/WEB-INF : 이 경로안에 JSP가 있으면 외부에서 직접 JSP 호출 불가 . 오로지 컨트롤러를 통해서만

redirect VS forward
클라이언트(웹 브라우저) 와 서버간의 요청 횟수 차이 
포워드는 클라이언트로 안나가고 서버 내부에서 일어나는 호출이기에 인지 못함.

-----------------------------------------------------------------------------
한계점

컨트롤러의 역할과 뷰를 렌더링 하는 역할을 명확하게 구분할 수 있었지만, 컨트롤러 코드에 중복이 많고 필요 없는 코드들도 많다.

1. 포워드 중복 : View 로 이동하는 코드가 항상 중복.

2. ViewPath 중복 : 동일한 루트에 있는 파일 위치 문자열 중복

3. 사용하지않는 코드 : 특히나, HttpServletResponse 객체는 JSP 뷰로 이동하기에 여기서 불필요함.

4. 공통 처리가 어렵다 : 기능이 복잡해질 수록 공통 처리 부분이 많아 질 것이다. --> 프론트 컨트롤러










































