엔티티들은 대부분 다른 엔티티와 연관관계가 있다.
이때, 객체는 참조(주소)를 사용해서 관계를 맺고, 데이터베이스 테이블은 외래 키를 사용해서 관계를 맺는다.
객체 관계 매핑 [ ORM ] 에서 가장 어려운 부분이면서 가장 중요한 부분이 객체 연관관계와 테이블 연관관계를 매핑하는 일이다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
핵심 키워드 
1. 방향 - 단방향,양방향이 있다.
	  연관관계에서 한 쪽만 참조하는 것을 단방향 관계, 서로 참조하는 것을 양방햔관계라고한다.
	  방향 이라는 개념은 객체관계에서만 존재하고, 테이블 관계는 항상 양방향이다.

2. 다중성 - N:1 , 1:N , 1:1 , N:M 이 있다.

3. 연관관계의 주인 
	- 객체 관계가 단방향이면 주인은 참조 필드가 존재하는 객체이지만, 
		      양방향 성질이면 주인은 직접 정해주어야한다.(mappedBy)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

1. 다대일 (N:1) 관계 - 단방향
	객체 연관관계에서는 참조하는 쪽에서 a.getB() 가 가능하지만, b.getA()를 접근하는 필드는 없다.
	테이블 연관관계에서는 외래키를 이용하여 join 연산을 실시할 수 있는 항상 양방향 관계이다.

******** 객체의 참조를 통한 연관관계는 언제나 단방향이다. 양방향 관계가 아닌 서로 다른 단방향 관계 2개이다.
	이때, 객체의 참조를 사용해서 연관관계를 탐색하는 것을 객체 그래프 탐색이라고한다.
		vs 데이터베이스는 외래 키를 사용해서 연관관계를 탐색하는데 이를 조인이라 한다.

	다대일 관계에서는 @ManyToOne 어노테이션을 사용하며, @JoinColumn으로 외래 키를 매핑하고 name 속성을 통해 컬럼명을 설정한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
연관관계 사용
1. 저장 
	ex) A a = new A () -> em.persist(a) -> B b = new B () -> b.setA(a) -> em.persist(b)

2. 조회
	- 객체 그래프 탐색 
	- 객체지향 쿼리 사용 (JPQL) , :로 시작 == 파라미터 바인딩받는 문법 

3. 수정
	ex) em.find(B.class, " ").setA(a`)

4. 삭제
	- 연관된 엔티티를 삭제하려면 기존에 있던 연관관계를 먼저 제거하고 삭제해야 한다.
	- 그렇지 않으면 외래 키 제약조건으로 db 오류 발생  
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
양방향 연관관계

테이블 연관관계에서는 신경 쓸 필요가 없고, 객체 연관관계에서만 신경 써주면 된다. ( 컬렉션 사용 가능)

mappedBy 속성은 양방향 매핑일 때 사용하는데 반대쪽 매핑의 필드 이름을 값으로 주면 된다.

	******************************************************************************
	엔티티를 양방향 연관관계로 설정하면 객체의 참조는 둘인데 외래 키는 하나이기에, 둘 사이의 차이가 발생한다.	
	이런 차이로인해 JPA에서는 두 객체 연관관계 중 하나를 정해서 테이블의 외래 키를 관리해야 하는데 이것을 연관관계의 주인이라한다.
	
	연관관계의 주인만이 db 연관관계와 매핑되고, 외래 키를 관리(등록,수정,삭제)할 수 있으며, 아닌 쪽은 read-only 
	== 연관관계의 주인 : 외래 키가 있는 곳 
	******************************************************************************

양방향 연관관계를 설정할 때에는 순수한 객체까지 고려해주는 것이 안전하다. [ 연관관계 편의 메소드 ]
