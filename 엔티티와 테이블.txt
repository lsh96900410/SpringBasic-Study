JPA 사용에 있어 가장 중요한 부분은 엔티티와 테이블 관계를 정확하게 매핑하는 것이다.
Ex) 	1. 객체와 테이블 매핑 어노테이션 @Entity , @Table
	2. 기본키 매핑 @Id
	3. 객체의 필드와 테이블 컬럼 매핑 @Column
	4. 테이블 간의 연관관계 매핑 @ManyToOne @OneToMany 

@Entity 어노테이션 
	JPA를 사용해서 테이블과 매핑할 클래스에 붙히는 어노테이션
	기본 생성자는 필수이다.	 ==> JAVA에서는 생성자가 하나도 없으면 기본 생성자를 자동으로 생성
	final, enum , interface , inner 클래스에는 사용할 수 없다.
	저장할 필드에 final을 사용하면 안 된다.

@Entity의 속성에는 name 속성이 있다. default == 클래스 이름을 그대로 사용한다.

@Talbe 어노테이션 
	엔티티와 매핑할 테이블을 지정한다. 

name, catalog, schema, uniqueConstraints (DDL)


JPA는 데이터베이스 스키마를 자동으로 생성하는 기능을 지원한다. 
--> 클래스의 매핑정보와 데이터베이스 방언 ( 특정 데이터베이스만의 고유한 기능 )을 사용해서 스키마 생성

DDL.Auto 속성에서 create ,drop ,create-drop 속성들은 테이블을 drop 시키기에 개발 서버나 개발 단계에서만 사용해야한다.

******************************************* 이름 매핑 *******************************************

단어와 단어를 구분 시 , 자바에서는 관례상 카멜케이스를 사용하지만, 데이터베이스는 언더스코어를 주로 사용한다.
하이버네이트 ImprovedNamingStrategy 클래스가 매핑이 생략되면 카멜케이스 -> 언더스코어 로 자동매핑해줌

***************************************************************************************************


JPA의 DDL 생성 기능 --> nullable , length 등의 기능들은 단지 DDL을 자동생성할 때만 사용되고 jpa 사용로직에는 영향 X

@Id 어노테이션
	엔티티의 필드 중 테이블의 기본키(PK)의 역할을 하는 필드에 붙히는 어노테이션
	***************  기본키 생성 전략  ***************
	1. 직접 할당 : 기본 키를 애플리케이션에서 직접 할당
		 엔티티 저장 전 기본 키 직접 할당 , 식별자 값 없이 저장하게되면 예외 발생 
		ex) Entity e = new Entity();
		    e.setId("id1");
		    em.persist(e);
	2. 자동 생성 : 대리 키 사용방식  [ @GeneratedValue ]
		- IDENTITY : 데이터베이스 위임
			주로 MySQL , PostgreSQL , SQL Server , DB2 에서 사용
			데이터베이스를 추가로 조회하게된다. 
			--> 최적화 : Statement.getGeneratedKeys() 사용하면 데이터를 저장하면서 동시에 생성된 키 값 얻기 가능
		
		- SEQUENCE : 데이터베이스 시퀀스 사용
			오라클 , PostgreSQL , DB2 , H2 데이터베이스에서 사용 가능
			@SequenceGenerator를 사용해서 시퀀스 생성 
			시퀀스를 통해 식별자 조회하여 DB에 2번 접근한다.
			--> 최적화 : @SequenceGenerator.allocationSize 사용		
		
		- TABLE : 키 생성 테이블 사용
			DB의 시퀀스를 흉내내는 키 생성 전용 테이블 생성하기에 모든 데이터베이스에 적용 가능
			
		
	**************************************************























